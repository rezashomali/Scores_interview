{"version":3,"sources":["components/ListItems/ListItems.js","components/Title/Title.js","components/Chart/Chart.js","components/ScoreTable/ScoreTable.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["mainListItems","ListItem","button","ListItemIcon","ListItemText","primary","SecondaryListItems","selectChartDataType","chartDataType","ListSubheader","inset","selected","onClick","Title","props","Typography","component","variant","color","gutterBottom","children","Chart","chartData","Fragment","data","margin","top","right","bottom","left","dataKey","angle","position","style","textAnchor","type","fill","useStyles","makeStyles","theme","seeMore","marginTop","spacing","ScoreTable","userData","classes","useState","readmore","setReadmore","searchValue","setSearchValue","key","direction","sortConfig","setSortConfig","sortedData","useMemo","sort","a","b","toLowerCase","requestSort","Grid","container","item","xs","align","TextField","label","size","value","onChange","e","target","Table","TableHead","TableRow","TableCell","padding","Button","endIcon","TableBody","filter","last_name","includes","first_name","city","country","slice","map","row","id","gender","score","className","Link","href","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Dashboard","open","setOpen","fixedHeightPaper","clsx","scoresListing","setScoresListing","countryAverageData","setCountryAverageData","genderAverageData","setGenderAverageData","setChartDataType","useEffect","fetch","then","response","json","generateCountryData","generateGenderData","catch","error","console","log","countryObj","countryAverageArray","count","Object","keys","push","genderObj","genderAverageArray","CssBaseline","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Drawer","Divider","List","Container","maxWidth","Paper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c68a53e6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListSubheader,\n} from \"@material-ui/core\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\n\nexport const mainListItems = (\n  <div>\n    <ListItem button>\n      <ListItemIcon>\n        <DashboardIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Dashboard\" />\n    </ListItem>\n  </div>\n);\n\nexport const SecondaryListItems = ({ selectChartDataType, chartDataType }) => (\n  <div>\n    <ListSubheader inset>Saved reports</ListSubheader>\n    <ListItem\n      selected={chartDataType === \"gender\"}\n      button\n      onClick={() => selectChartDataType(\"gender\")}\n    >\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Scores by gender\" />\n    </ListItem>\n    <ListItem\n      selected={chartDataType === \"country\"}\n      button\n      onClick={() => selectChartDataType(\"country\")}\n    >\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Scores by country\" />\n    </ListItem>\n  </div>\n);\n\nSecondaryListItems.propTypes = {\n  selectChartDataType: PropTypes.func.isRequired,\n  chartDataType: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Title = (props) => (\n  <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n    {props.children}\n  </Typography>\n);\nexport default Title;\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Label,\n  ResponsiveContainer,\n  Tooltip,\n} from \"recharts\";\nimport Title from \"../Title/Title\";\n\nconst Chart = ({ chartData, chartDataType }) => (\n  <React.Fragment>\n    <Title>Score statistics</Title>\n    <ResponsiveContainer>\n      <BarChart\n        data={chartData}\n        margin={{\n          top: 16,\n          right: 16,\n          bottom: 0,\n          left: 24,\n        }}\n      >\n        <Tooltip />\n        <XAxis dataKey={chartDataType} />\n        <YAxis>\n          <Label angle={270} position=\"left\" style={{ textAnchor: \"middle\" }}>\n            Average score\n          </Label>\n        </YAxis>\n        <Bar type=\"monotone\" dataKey=\"score\" fill=\"#556CD6\" />\n      </BarChart>\n    </ResponsiveContainer>\n  </React.Fragment>\n);\n\nexport default Chart;\n\nChart.propTypes = {\n  chartData: PropTypes.array.isRequired,\n  chartDataType: PropTypes.string.isRequired,\n};\n","import React, { useState, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Link,\r\n  Table,\r\n  Button,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport Title from \"../Title/Title\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst ScoreTable = ({ userData }) => {\r\n  const classes = useStyles();\r\n  const [readmore, setReadmore] = useState(false);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [sortConfig, setSortConfig] = useState({\r\n    key: null,\r\n    direction: null,\r\n  });\r\n\r\n  let sortedData = userData;\r\n  useMemo(() => {\r\n    if (sortConfig.key !== null) {\r\n      sortedData.sort((a, b) => {\r\n        if (\r\n          a[sortConfig.key]?.toLowerCase() < b[sortConfig.key]?.toLowerCase()\r\n        ) {\r\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n        }\r\n        if (\r\n          a[sortConfig.key]?.toLowerCase() > b[sortConfig.key]?.toLowerCase()\r\n        ) {\r\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return sortedData;\r\n  }, [sortConfig, userData]);\r\n\r\n  const requestSort = (key) => {\r\n    let direction = \"ascending\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n      direction = \"descending\";\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6}>\r\n          <Title>Scores listing</Title>\r\n        </Grid>\r\n        <Grid item xs={6} align=\"right\">\r\n          <TextField\r\n            label=\"search...\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={searchValue}\r\n            onChange={(e) => setSearchValue(e.target.value.toLowerCase())}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell size=\"small\" padding=\"none\">\r\n              <Button\r\n                type=\"button\"\r\n                size=\"small\"\r\n                endIcon={\r\n                  sortConfig.key === \"last_name\" ? (\r\n                    sortConfig.direction === \"ascending\" ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )\r\n                  ) : (\r\n                    \"\"\r\n                  )\r\n                }\r\n                onClick={() => requestSort(\"last_name\")}\r\n              >\r\n                Last name\r\n              </Button>\r\n            </TableCell>\r\n            <TableCell size=\"small\" padding=\"none\">\r\n              <Button\r\n                type=\"button\"\r\n                size=\"small\"\r\n                endIcon={\r\n                  sortConfig.key === \"first_name\" ? (\r\n                    sortConfig.direction === \"ascending\" ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )\r\n                  ) : (\r\n                    \"\"\r\n                  )\r\n                }\r\n                onClick={() => requestSort(\"first_name\")}\r\n              >\r\n                First name\r\n              </Button>\r\n            </TableCell>\r\n            <TableCell size=\"small\" padding=\"none\">\r\n              Gender\r\n            </TableCell>\r\n            <TableCell size=\"small\" padding=\"none\">\r\n              <Button\r\n                size=\"small\"\r\n                type=\"button\"\r\n                endIcon={\r\n                  sortConfig.key === \"city\" ? (\r\n                    sortConfig.direction === \"ascending\" ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )\r\n                  ) : (\r\n                    \"\"\r\n                  )\r\n                }\r\n                onClick={() => requestSort(\"city\")}\r\n              >\r\n                City\r\n              </Button>\r\n            </TableCell>\r\n            <TableCell size=\"small\" padding=\"none\">\r\n              <Button\r\n                size=\"small\"\r\n                type=\"button\"\r\n                endIcon={\r\n                  sortConfig.key === \"country\" ? (\r\n                    sortConfig.direction === \"ascending\" ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )\r\n                  ) : (\r\n                    \"\"\r\n                  )\r\n                }\r\n                onClick={() => requestSort(\"country\")}\r\n              >\r\n                Country\r\n              </Button>\r\n            </TableCell>\r\n            <TableCell align=\"right\" size=\"small\" padding=\"none\">\r\n              Score\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {sortedData\r\n            .filter(\r\n              (item) =>\r\n                searchValue === \"\" ||\r\n                item.last_name?.toLowerCase().includes(searchValue) ||\r\n                item.first_name?.toLowerCase().includes(searchValue) ||\r\n                item.city?.toLowerCase().includes(searchValue) ||\r\n                item.country?.toLowerCase().includes(searchValue)\r\n            )\r\n            .slice(0, readmore ? -1 : 10)\r\n            .map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>{row.last_name}</TableCell>\r\n                <TableCell>{row.first_name}</TableCell>\r\n                <TableCell>{row.gender}</TableCell>\r\n                <TableCell>{row.city}</TableCell>\r\n                <TableCell>{row.country}</TableCell>\r\n                <TableCell align=\"right\">{row.score}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link onClick={() => setReadmore(!readmore)} color=\"primary\" href=\"#\">\r\n          {readmore ? \"See less scores\" : \"see more scores\"}\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ScoreTable;\r\n\r\nScoreTable.propTypes = {\r\n  userData: PropTypes.array.isRequired,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  CssBaseline,\n  Drawer,\n  AppBar,\n  Toolbar,\n  List,\n  Typography,\n  Divider,\n  IconButton,\n  Container,\n  Grid,\n  Paper,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { mainListItems, SecondaryListItems } from \"../ListItems/ListItems\";\nimport Chart from \"../Chart/Chart\";\nimport ScoreTable from \"../ScoreTable/ScoreTable\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  const [scoresListing, setScoresListing] = useState([]);\n  const [countryAverageData, setCountryAverageData] = useState([]);\n  const [genderAverageData, setGenderAverageData] = useState([]);\n  const [chartDataType, setChartDataType] = useState(\"country\");\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/people.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setScoresListing(data);\n        setCountryAverageData(generateCountryData(data));\n        setGenderAverageData(generateGenderData(data));\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  const generateCountryData = (data) => {\n    const countryObj = {};\n    const countryAverageArray = [];\n\n    data.map((item) => {\n      if (countryObj[item.country]) {\n        countryObj[item.country].score += item.score;\n        countryObj[item.country].count += 1;\n      } else {\n        countryObj[item.country] = { score: 0, count: 1 };\n      }\n      return 0;\n    });\n\n    Object.keys(countryObj).map((item) => {\n      countryAverageArray.push({\n        country: item,\n        score: countryObj[item].score / countryObj[item].count,\n      });\n      return 0;\n    });\n\n    return countryAverageArray;\n  };\n\n  const generateGenderData = (data) => {\n    const genderObj = {};\n    const genderAverageArray = [];\n\n    data.map((item) => {\n      if (genderObj[item.gender]) {\n        genderObj[item.gender].score += item.score;\n        genderObj[item.gender].count += 1;\n      } else {\n        genderObj[item.gender] = { score: 0, count: 1 };\n      }\n      return 0;\n    });\n\n    Object.keys(genderObj).map((item) => {\n      genderAverageArray.push({\n        gender: item,\n        score: genderObj[item].score / genderObj[item].count,\n      });\n      return 0;\n    });\n\n    return genderAverageArray;\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        className={clsx(classes.appBar, open && classes.appBarShift)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(\n              classes.menuButton,\n              open && classes.menuButtonHidden\n            )}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            component=\"h1\"\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.title}\n          >\n            Holidu Interview Dashboard\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        <List>\n          <SecondaryListItems\n            chartDataType={chartDataType}\n            selectChartDataType={setChartDataType}\n          />\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            {/* Chart */}\n            <Grid item xs={12}>\n              <Paper className={fixedHeightPaper}>\n                <Chart\n                  chartDataType={chartDataType}\n                  chartData={\n                    chartDataType === \"country\"\n                      ? countryAverageData\n                      : genderAverageData\n                  }\n                />\n              </Paper>\n            </Grid>\n            {/* Recent scores */}\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                {scoresListing && <ScoreTable userData={scoresListing} />}\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport \"./App.css\";\n\nexport default function App() {\n  return <Dashboard />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n    <CssBaseline />\r\n    <App />\r\n  </>,\r\n  document.querySelector(\"#root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}